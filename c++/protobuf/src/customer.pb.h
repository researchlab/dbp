// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: customer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_customer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_customer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_customer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_customer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_customer_2eproto;
namespace customer {
class CustomerFilter;
class CustomerFilterDefaultTypeInternal;
extern CustomerFilterDefaultTypeInternal _CustomerFilter_default_instance_;
class CustomerRequest;
class CustomerRequestDefaultTypeInternal;
extern CustomerRequestDefaultTypeInternal _CustomerRequest_default_instance_;
class CustomerRequest_Address;
class CustomerRequest_AddressDefaultTypeInternal;
extern CustomerRequest_AddressDefaultTypeInternal _CustomerRequest_Address_default_instance_;
class CustomerResponse;
class CustomerResponseDefaultTypeInternal;
extern CustomerResponseDefaultTypeInternal _CustomerResponse_default_instance_;
}  // namespace customer
PROTOBUF_NAMESPACE_OPEN
template<> ::customer::CustomerFilter* Arena::CreateMaybeMessage<::customer::CustomerFilter>(Arena*);
template<> ::customer::CustomerRequest* Arena::CreateMaybeMessage<::customer::CustomerRequest>(Arena*);
template<> ::customer::CustomerRequest_Address* Arena::CreateMaybeMessage<::customer::CustomerRequest_Address>(Arena*);
template<> ::customer::CustomerResponse* Arena::CreateMaybeMessage<::customer::CustomerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace customer {

// ===================================================================

class CustomerRequest_Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:customer.CustomerRequest.Address) */ {
 public:
  inline CustomerRequest_Address() : CustomerRequest_Address(nullptr) {}
  virtual ~CustomerRequest_Address();

  CustomerRequest_Address(const CustomerRequest_Address& from);
  CustomerRequest_Address(CustomerRequest_Address&& from) noexcept
    : CustomerRequest_Address() {
    *this = ::std::move(from);
  }

  inline CustomerRequest_Address& operator=(const CustomerRequest_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerRequest_Address& operator=(CustomerRequest_Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerRequest_Address& default_instance();

  static inline const CustomerRequest_Address* internal_default_instance() {
    return reinterpret_cast<const CustomerRequest_Address*>(
               &_CustomerRequest_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustomerRequest_Address& a, CustomerRequest_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerRequest_Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerRequest_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerRequest_Address* New() const final {
    return CreateMaybeMessage<CustomerRequest_Address>(nullptr);
  }

  CustomerRequest_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerRequest_Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerRequest_Address& from);
  void MergeFrom(const CustomerRequest_Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerRequest_Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "customer.CustomerRequest.Address";
  }
  protected:
  explicit CustomerRequest_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customer_2eproto);
    return ::descriptor_table_customer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetFieldNumber = 1,
    kCityFieldNumber = 2,
    kStateFieldNumber = 3,
    kZipFieldNumber = 4,
    kIsShippingAddressFieldNumber = 5,
  };
  // string street = 1;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string city = 2;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string zip = 4;
  void clear_zip();
  const std::string& zip() const;
  void set_zip(const std::string& value);
  void set_zip(std::string&& value);
  void set_zip(const char* value);
  void set_zip(const char* value, size_t size);
  std::string* mutable_zip();
  std::string* release_zip();
  void set_allocated_zip(std::string* zip);
  private:
  const std::string& _internal_zip() const;
  void _internal_set_zip(const std::string& value);
  std::string* _internal_mutable_zip();
  public:

  // bool isShippingAddress = 5;
  void clear_isshippingaddress();
  bool isshippingaddress() const;
  void set_isshippingaddress(bool value);
  private:
  bool _internal_isshippingaddress() const;
  void _internal_set_isshippingaddress(bool value);
  public:

  // @@protoc_insertion_point(class_scope:customer.CustomerRequest.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zip_;
  bool isshippingaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customer_2eproto;
};
// -------------------------------------------------------------------

class CustomerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:customer.CustomerRequest) */ {
 public:
  inline CustomerRequest() : CustomerRequest(nullptr) {}
  virtual ~CustomerRequest();

  CustomerRequest(const CustomerRequest& from);
  CustomerRequest(CustomerRequest&& from) noexcept
    : CustomerRequest() {
    *this = ::std::move(from);
  }

  inline CustomerRequest& operator=(const CustomerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerRequest& operator=(CustomerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerRequest& default_instance();

  static inline const CustomerRequest* internal_default_instance() {
    return reinterpret_cast<const CustomerRequest*>(
               &_CustomerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomerRequest& a, CustomerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerRequest* New() const final {
    return CreateMaybeMessage<CustomerRequest>(nullptr);
  }

  CustomerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerRequest& from);
  void MergeFrom(const CustomerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "customer.CustomerRequest";
  }
  protected:
  explicit CustomerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customer_2eproto);
    return ::descriptor_table_customer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CustomerRequest_Address Address;

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 5,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPhoneFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated .customer.CustomerRequest.Address addresses = 5;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::customer::CustomerRequest_Address* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::customer::CustomerRequest_Address >*
      mutable_addresses();
  private:
  const ::customer::CustomerRequest_Address& _internal_addresses(int index) const;
  ::customer::CustomerRequest_Address* _internal_add_addresses();
  public:
  const ::customer::CustomerRequest_Address& addresses(int index) const;
  ::customer::CustomerRequest_Address* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::customer::CustomerRequest_Address >&
      addresses() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 4;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:customer.CustomerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::customer::CustomerRequest_Address > addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customer_2eproto;
};
// -------------------------------------------------------------------

class CustomerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:customer.CustomerResponse) */ {
 public:
  inline CustomerResponse() : CustomerResponse(nullptr) {}
  virtual ~CustomerResponse();

  CustomerResponse(const CustomerResponse& from);
  CustomerResponse(CustomerResponse&& from) noexcept
    : CustomerResponse() {
    *this = ::std::move(from);
  }

  inline CustomerResponse& operator=(const CustomerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerResponse& operator=(CustomerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerResponse& default_instance();

  static inline const CustomerResponse* internal_default_instance() {
    return reinterpret_cast<const CustomerResponse*>(
               &_CustomerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CustomerResponse& a, CustomerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerResponse* New() const final {
    return CreateMaybeMessage<CustomerResponse>(nullptr);
  }

  CustomerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerResponse& from);
  void MergeFrom(const CustomerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "customer.CustomerResponse";
  }
  protected:
  explicit CustomerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customer_2eproto);
    return ::descriptor_table_customer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:customer.CustomerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customer_2eproto;
};
// -------------------------------------------------------------------

class CustomerFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:customer.CustomerFilter) */ {
 public:
  inline CustomerFilter() : CustomerFilter(nullptr) {}
  virtual ~CustomerFilter();

  CustomerFilter(const CustomerFilter& from);
  CustomerFilter(CustomerFilter&& from) noexcept
    : CustomerFilter() {
    *this = ::std::move(from);
  }

  inline CustomerFilter& operator=(const CustomerFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerFilter& operator=(CustomerFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerFilter& default_instance();

  static inline const CustomerFilter* internal_default_instance() {
    return reinterpret_cast<const CustomerFilter*>(
               &_CustomerFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CustomerFilter& a, CustomerFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerFilter* New() const final {
    return CreateMaybeMessage<CustomerFilter>(nullptr);
  }

  CustomerFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerFilter& from);
  void MergeFrom(const CustomerFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "customer.CustomerFilter";
  }
  protected:
  explicit CustomerFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customer_2eproto);
    return ::descriptor_table_customer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeywordFieldNumber = 1,
  };
  // string keyword = 1;
  void clear_keyword();
  const std::string& keyword() const;
  void set_keyword(const std::string& value);
  void set_keyword(std::string&& value);
  void set_keyword(const char* value);
  void set_keyword(const char* value, size_t size);
  std::string* mutable_keyword();
  std::string* release_keyword();
  void set_allocated_keyword(std::string* keyword);
  private:
  const std::string& _internal_keyword() const;
  void _internal_set_keyword(const std::string& value);
  std::string* _internal_mutable_keyword();
  public:

  // @@protoc_insertion_point(class_scope:customer.CustomerFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyword_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomerRequest_Address

// string street = 1;
inline void CustomerRequest_Address::clear_street() {
  street_.ClearToEmpty();
}
inline const std::string& CustomerRequest_Address::street() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.Address.street)
  return _internal_street();
}
inline void CustomerRequest_Address::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.Address.street)
}
inline std::string* CustomerRequest_Address::mutable_street() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.Address.street)
  return _internal_mutable_street();
}
inline const std::string& CustomerRequest_Address::_internal_street() const {
  return street_.Get();
}
inline void CustomerRequest_Address::_internal_set_street(const std::string& value) {
  
  street_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerRequest_Address::set_street(std::string&& value) {
  
  street_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerRequest.Address.street)
}
inline void CustomerRequest_Address::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerRequest.Address.street)
}
inline void CustomerRequest_Address::set_street(const char* value,
    size_t size) {
  
  street_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerRequest.Address.street)
}
inline std::string* CustomerRequest_Address::_internal_mutable_street() {
  
  return street_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerRequest_Address::release_street() {
  // @@protoc_insertion_point(field_release:customer.CustomerRequest.Address.street)
  return street_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerRequest_Address::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerRequest.Address.street)
}

// string city = 2;
inline void CustomerRequest_Address::clear_city() {
  city_.ClearToEmpty();
}
inline const std::string& CustomerRequest_Address::city() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.Address.city)
  return _internal_city();
}
inline void CustomerRequest_Address::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.Address.city)
}
inline std::string* CustomerRequest_Address::mutable_city() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.Address.city)
  return _internal_mutable_city();
}
inline const std::string& CustomerRequest_Address::_internal_city() const {
  return city_.Get();
}
inline void CustomerRequest_Address::_internal_set_city(const std::string& value) {
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerRequest_Address::set_city(std::string&& value) {
  
  city_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerRequest.Address.city)
}
inline void CustomerRequest_Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerRequest.Address.city)
}
inline void CustomerRequest_Address::set_city(const char* value,
    size_t size) {
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerRequest.Address.city)
}
inline std::string* CustomerRequest_Address::_internal_mutable_city() {
  
  return city_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerRequest_Address::release_city() {
  // @@protoc_insertion_point(field_release:customer.CustomerRequest.Address.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerRequest_Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerRequest.Address.city)
}

// string state = 3;
inline void CustomerRequest_Address::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& CustomerRequest_Address::state() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.Address.state)
  return _internal_state();
}
inline void CustomerRequest_Address::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.Address.state)
}
inline std::string* CustomerRequest_Address::mutable_state() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.Address.state)
  return _internal_mutable_state();
}
inline const std::string& CustomerRequest_Address::_internal_state() const {
  return state_.Get();
}
inline void CustomerRequest_Address::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerRequest_Address::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerRequest.Address.state)
}
inline void CustomerRequest_Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerRequest.Address.state)
}
inline void CustomerRequest_Address::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerRequest.Address.state)
}
inline std::string* CustomerRequest_Address::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerRequest_Address::release_state() {
  // @@protoc_insertion_point(field_release:customer.CustomerRequest.Address.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerRequest_Address::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerRequest.Address.state)
}

// string zip = 4;
inline void CustomerRequest_Address::clear_zip() {
  zip_.ClearToEmpty();
}
inline const std::string& CustomerRequest_Address::zip() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.Address.zip)
  return _internal_zip();
}
inline void CustomerRequest_Address::set_zip(const std::string& value) {
  _internal_set_zip(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.Address.zip)
}
inline std::string* CustomerRequest_Address::mutable_zip() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.Address.zip)
  return _internal_mutable_zip();
}
inline const std::string& CustomerRequest_Address::_internal_zip() const {
  return zip_.Get();
}
inline void CustomerRequest_Address::_internal_set_zip(const std::string& value) {
  
  zip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerRequest_Address::set_zip(std::string&& value) {
  
  zip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerRequest.Address.zip)
}
inline void CustomerRequest_Address::set_zip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerRequest.Address.zip)
}
inline void CustomerRequest_Address::set_zip(const char* value,
    size_t size) {
  
  zip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerRequest.Address.zip)
}
inline std::string* CustomerRequest_Address::_internal_mutable_zip() {
  
  return zip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerRequest_Address::release_zip() {
  // @@protoc_insertion_point(field_release:customer.CustomerRequest.Address.zip)
  return zip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerRequest_Address::set_allocated_zip(std::string* zip) {
  if (zip != nullptr) {
    
  } else {
    
  }
  zip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerRequest.Address.zip)
}

// bool isShippingAddress = 5;
inline void CustomerRequest_Address::clear_isshippingaddress() {
  isshippingaddress_ = false;
}
inline bool CustomerRequest_Address::_internal_isshippingaddress() const {
  return isshippingaddress_;
}
inline bool CustomerRequest_Address::isshippingaddress() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.Address.isShippingAddress)
  return _internal_isshippingaddress();
}
inline void CustomerRequest_Address::_internal_set_isshippingaddress(bool value) {
  
  isshippingaddress_ = value;
}
inline void CustomerRequest_Address::set_isshippingaddress(bool value) {
  _internal_set_isshippingaddress(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.Address.isShippingAddress)
}

// -------------------------------------------------------------------

// CustomerRequest

// int32 id = 1;
inline void CustomerRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerRequest::id() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.id)
  return _internal_id();
}
inline void CustomerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CustomerRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.id)
}

// string name = 2;
inline void CustomerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CustomerRequest::name() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.name)
  return _internal_name();
}
inline void CustomerRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.name)
}
inline std::string* CustomerRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CustomerRequest::_internal_name() const {
  return name_.Get();
}
inline void CustomerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerRequest.name)
}
inline void CustomerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerRequest.name)
}
inline void CustomerRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerRequest.name)
}
inline std::string* CustomerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerRequest::release_name() {
  // @@protoc_insertion_point(field_release:customer.CustomerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerRequest.name)
}

// string email = 3;
inline void CustomerRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& CustomerRequest::email() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.email)
  return _internal_email();
}
inline void CustomerRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.email)
}
inline std::string* CustomerRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.email)
  return _internal_mutable_email();
}
inline const std::string& CustomerRequest::_internal_email() const {
  return email_.Get();
}
inline void CustomerRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerRequest::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerRequest.email)
}
inline void CustomerRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerRequest.email)
}
inline void CustomerRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerRequest.email)
}
inline std::string* CustomerRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerRequest::release_email() {
  // @@protoc_insertion_point(field_release:customer.CustomerRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerRequest.email)
}

// string phone = 4;
inline void CustomerRequest::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& CustomerRequest::phone() const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.phone)
  return _internal_phone();
}
inline void CustomerRequest::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:customer.CustomerRequest.phone)
}
inline std::string* CustomerRequest::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.phone)
  return _internal_mutable_phone();
}
inline const std::string& CustomerRequest::_internal_phone() const {
  return phone_.Get();
}
inline void CustomerRequest::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerRequest::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerRequest.phone)
}
inline void CustomerRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerRequest.phone)
}
inline void CustomerRequest::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerRequest.phone)
}
inline std::string* CustomerRequest::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerRequest::release_phone() {
  // @@protoc_insertion_point(field_release:customer.CustomerRequest.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerRequest::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerRequest.phone)
}

// repeated .customer.CustomerRequest.Address addresses = 5;
inline int CustomerRequest::_internal_addresses_size() const {
  return addresses_.size();
}
inline int CustomerRequest::addresses_size() const {
  return _internal_addresses_size();
}
inline void CustomerRequest::clear_addresses() {
  addresses_.Clear();
}
inline ::customer::CustomerRequest_Address* CustomerRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:customer.CustomerRequest.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::customer::CustomerRequest_Address >*
CustomerRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:customer.CustomerRequest.addresses)
  return &addresses_;
}
inline const ::customer::CustomerRequest_Address& CustomerRequest::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::customer::CustomerRequest_Address& CustomerRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:customer.CustomerRequest.addresses)
  return _internal_addresses(index);
}
inline ::customer::CustomerRequest_Address* CustomerRequest::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::customer::CustomerRequest_Address* CustomerRequest::add_addresses() {
  // @@protoc_insertion_point(field_add:customer.CustomerRequest.addresses)
  return _internal_add_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::customer::CustomerRequest_Address >&
CustomerRequest::addresses() const {
  // @@protoc_insertion_point(field_list:customer.CustomerRequest.addresses)
  return addresses_;
}

// -------------------------------------------------------------------

// CustomerResponse

// int32 id = 1;
inline void CustomerResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerResponse::id() const {
  // @@protoc_insertion_point(field_get:customer.CustomerResponse.id)
  return _internal_id();
}
inline void CustomerResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CustomerResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:customer.CustomerResponse.id)
}

// bool success = 2;
inline void CustomerResponse::clear_success() {
  success_ = false;
}
inline bool CustomerResponse::_internal_success() const {
  return success_;
}
inline bool CustomerResponse::success() const {
  // @@protoc_insertion_point(field_get:customer.CustomerResponse.success)
  return _internal_success();
}
inline void CustomerResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CustomerResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:customer.CustomerResponse.success)
}

// -------------------------------------------------------------------

// CustomerFilter

// string keyword = 1;
inline void CustomerFilter::clear_keyword() {
  keyword_.ClearToEmpty();
}
inline const std::string& CustomerFilter::keyword() const {
  // @@protoc_insertion_point(field_get:customer.CustomerFilter.keyword)
  return _internal_keyword();
}
inline void CustomerFilter::set_keyword(const std::string& value) {
  _internal_set_keyword(value);
  // @@protoc_insertion_point(field_set:customer.CustomerFilter.keyword)
}
inline std::string* CustomerFilter::mutable_keyword() {
  // @@protoc_insertion_point(field_mutable:customer.CustomerFilter.keyword)
  return _internal_mutable_keyword();
}
inline const std::string& CustomerFilter::_internal_keyword() const {
  return keyword_.Get();
}
inline void CustomerFilter::_internal_set_keyword(const std::string& value) {
  
  keyword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerFilter::set_keyword(std::string&& value) {
  
  keyword_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:customer.CustomerFilter.keyword)
}
inline void CustomerFilter::set_keyword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:customer.CustomerFilter.keyword)
}
inline void CustomerFilter::set_keyword(const char* value,
    size_t size) {
  
  keyword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:customer.CustomerFilter.keyword)
}
inline std::string* CustomerFilter::_internal_mutable_keyword() {
  
  return keyword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerFilter::release_keyword() {
  // @@protoc_insertion_point(field_release:customer.CustomerFilter.keyword)
  return keyword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerFilter::set_allocated_keyword(std::string* keyword) {
  if (keyword != nullptr) {
    
  } else {
    
  }
  keyword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:customer.CustomerFilter.keyword)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace customer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_customer_2eproto
